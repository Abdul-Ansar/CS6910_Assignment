# -*- coding: utf-8 -*-
"""Layers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OysGn8fhxRw0wJwVzbK9ORFDiZrOT1FU
"""

import numpy as np
from activations import Sigmoid, Tanh, Relu, Softmax

# Mapping activation function names to their corresponding class instances
map_activations = {"Sigmoid": Sigmoid(), "Tanh": Tanh(), "Relu": Relu(), "Softmax": Softmax()}

################################################
#         Layers
################################################

class Input():
    """
    Class representing the input layer of a neural network.
    """
    def __init__(self, data):
        """
        Constructor method to initialize input layer.

        Args:
            data (numpy.ndarray): Input data.
        """
        self.name = "Input"
        self.input = data
        self.size = self.input.shape[0]
        # self.input = np.append(data, np.ones((1, data.shape[1])), axis=0)
        # Having the input as the activated output
        # to be given to the next layer
        self.a = self.input  # Activated output to be passed to the next layer
        self.type = "Input layer"

    def __repr__(self):
        """
        Method to represent the input layer.

        Returns:
            str: String representation of the input layer.
        """
        representation = self.type + " - of Size:" + str(self.size)
        return representation

class Dense():
    """
    Class representing a dense (fully connected) layer of a neural network.
    """
    def __init__(self, size, activation, name, last=False):
        """
        Constructor method to initialize dense layer.

        Args:
            size (int): Number of neurons in the layer.
            activation (str): Name of the activation function.
            name (str): Name of the layer.
            last (bool, optional): Indicates if this is the last layer of the network.
        """
        self.name = name
        self.size = size
        self.activation = map_activations[activation]  # Activation function
        self.activation_name = activation  # Name of the activation function
        self.type = "Dense layer"

    def __repr__(self):
        """
        Method to represent the dense layer.

        Returns:
            str: String representation of the dense layer.
        """
        representation = self.type + " - of Size:" + str(self.size) + "; Activation:" + self.activation_name
        return representation
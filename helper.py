# -*- coding: utf-8 -*-
"""Helper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zPf5y5V7MYQfvgEbEoQSlWLu7sPW89ce
"""

import numpy as np

################################################
#         Additional Helper Functions
################################################

class OneHotEncoder():
    """
    One-hot encoder class for converting categorical labels into one-hot encoded vectors.
    """
    def __init__(self):
        pass

    def fit(self, y, num_classes):
        """
        Fit method to store the labels and number of classes.

        Args:
            y (numpy.ndarray): Array of labels.
            num_classes (int): Number of unique classes.
        """
        self.y = y
        self.num_classes = num_classes

    def transform(self):
        """
        Transform method to perform one-hot encoding.

        Returns:
            numpy.ndarray: One-hot encoded matrix.
        """
        transformed = np.zeros((self.num_classes, self.y.size))
        for col, row in enumerate(self.y):
            transformed[row, col] = 1
        return transformed

    def fit_transform(self, y, num_classes):
        """
        Combined fit and transform method for convenience.

        Args:
            y (numpy.ndarray): Array of labels.
            num_classes (int): Number of unique classes.

        Returns:
            numpy.ndarray: One-hot encoded matrix.
        """
        self.fit(y, num_classes)
        return self.transform()

    def inverse_transform(self, y):
        """
        Inverse transform method to convert one-hot encoded matrix back to class labels.

        Args:
            y (numpy.ndarray): One-hot encoded matrix.

        Returns:
            numpy.ndarray: Array of class labels.
        """
        y_class = np.argmax(y, axis=0)
        return y_class


class MinMaxScaler():
    """
    Min-max scaler class for scaling features to a specified range.
    """
    def __init__(self):
        pass

    def fit(self, X):
        """
        Fit method to compute minimum and maximum values for scaling.

        Args:
            X (numpy.ndarray): Feature matrix.
        """
        self.min = np.min(X, axis=0)
        self.max = np.max(X, axis=0)

    def transform(self, X):
        """
        Transform method to scale features to the specified range.

        Args:
            X (numpy.ndarray): Feature matrix.

        Returns:
            numpy.ndarray: Scaled feature matrix.
        """
        transformed = (X - self.min) / (self.max - self.min)
        return transformed

    def fit_transform(self, X):
        """
        Combined fit and transform method for convenience.

        Args:
            X (numpy.ndarray): Feature matrix.

        Returns:
            numpy.ndarray: Scaled feature matrix.
        """
        self.fit(X)
        return self.transform(X)